{"ast":null,"code":"import _defineProperty from \"/Users/drashti/Documents/Drashti workshop/todo-app-part-3/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport todosList from \"./todos.json\";\nimport { TOGGLE_TODO, CLEAR_COMPLETED_TODOS, ADD_TODO } from \"./actions\";\nvar intialState = {\n  todos: todosList\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : intialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TOGGLE_TODO:\n      {\n        // this.props.toggleTodo(todoIdToToggle);\n        var newTodoList = state.todos.map(function (todo) {\n          if (todo.id === action.payload) {\n            var newTodo = _objectSpread({}, todo);\n\n            newTodo.completed = !newTodo.completed;\n            return newTodo;\n          }\n\n          return todo;\n        });\n        return {\n          todos: newTodoList\n        };\n      }\n\n    case ADD_TODO:\n      {\n        var _newTodoList = state.todos.slice();\n\n        _newTodoList.push(action.payload);\n\n        return {\n          todos: _newTodoList\n        };\n      }\n\n    case CLEAR_COMPLETED_TODOS:\n      {\n        return _objectSpread({}, state, {\n          todos: state\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/todo-app-part-3/src/reducer.js"],"names":["todosList","TOGGLE_TODO","CLEAR_COMPLETED_TODOS","ADD_TODO","intialState","todos","reducer","state","action","type","newTodoList","map","todo","id","payload","newTodo","completed","slice","push"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,SACEC,WADF,EAEIC,qBAFJ,EAGIC,QAHJ,QAKO,WALP;AAOA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAEL;AADW,CAApB;;AAKA,IAAMM,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBH,WAAwB;AAAA,MAAXI,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AAAiB;AACf;AACA,YAAMS,WAAW,GAAGH,KAAK,CAACF,KAAN,CAAYM,GAAZ,CAAgB,UAAAC,IAAI,EAAI;AAC1C,cAAIA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,OAAvB,EAAgC;AAC9B,gBAAMC,OAAO,qBAAQH,IAAR,CAAb;;AACAG,YAAAA,OAAO,CAACC,SAAR,GAAoB,CAACD,OAAO,CAACC,SAA7B;AACA,mBAAOD,OAAP;AACD;;AACD,iBAAOH,IAAP;AACD,SAPmB,CAApB;AASA,eAAO;AAAEP,UAAAA,KAAK,EAAEK;AAAT,SAAP;AACD;;AACC,SAAKP,QAAL;AAAc;AACV,YAAMO,YAAW,GAAGH,KAAK,CAACF,KAAN,CAAYY,KAAZ,EAApB;;AACAP,QAAAA,YAAW,CAACQ,IAAZ,CAAiBV,MAAM,CAACM,OAAxB;;AACA,eAAM;AAAET,UAAAA,KAAK,EAAEK;AAAT,SAAN;AACH;;AACD,SAAKR,qBAAL;AAA2B;AACvB,iCAAWK,KAAX;AAAiBF,UAAAA,KAAK,EAAEE;AAAxB;AACH;;AACH;AACE,aAAOA,KAAP;AAvBJ;AAyBD,CA1BD;;AA2BA,eAAeD,OAAf","sourcesContent":["import todosList from \"./todos.json\";\n\nimport {\n  TOGGLE_TODO, \n    CLEAR_COMPLETED_TODOS,\n    ADD_TODO\n   \n} from \"./actions\";\n\nconst intialState = {\n  todos: todosList\n \n};\n\nconst reducer = (state = intialState, action) => {\n  switch (action.type) {\n    case TOGGLE_TODO:{\n      // this.props.toggleTodo(todoIdToToggle);\n      const newTodoList = state.todos.map(todo => {\n        if (todo.id === action.payload) {\n          const newTodo = { ...todo };\n          newTodo.completed = !newTodo.completed;\n          return newTodo;\n        }\n        return todo;\n      });\n    \n      return { todos: newTodoList };\n    }\n      case ADD_TODO:{\n          const newTodoList = state.todos.slice();\n          newTodoList.push(action.payload)\n          return{ todos: newTodoList};\n      }\n      case CLEAR_COMPLETED_TODOS:{\n          return {...state,todos: state}\n      }\n    default:\n      return state;\n  }\n};\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}